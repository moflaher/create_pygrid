#! /usr/bin/env python
#
# Support module generated by PAGE version 4.8.6
# In conjunction with Tcl version 8.6
#    Jan 17, 2017 02:39:52 AM


import sys
import utilities as ut
import numpy as np
from tkFileDialog import askopenfilename, asksaveasfilename
import copy
from matplotlib.collections import LineCollection as LC
import matplotlib.patches as mpatches
import matplotlib.path as path

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1


def TODO():
    print('pygrid_support.TODO')
    sys.stdout.flush()    
    
def clear_selection():
    
    if not hasattr(w,'haveArea'):
        w.haveArea=False
    if w.haveArea:
        w.areaFIG.remove()
        w.figure.canvas.draw()
        w.haveArea=False
        
    if hasattr(w,'path'):    
        del(w.path)
    if hasattr(w,'contains'):    
        del(w.contains)
    if hasattr(w,'cid'):
        w.figure.canvas.mpl_disconnect(w.cid)
    if hasattr(w,'areaVec'):
        del(w.areaVec)
        
        
def select_area():   
    
    
    def onclick_handler1(event):
        draw=False
        if event.button==1:
            w.areaVec=np.vstack([w.areaVec,np.array([event.xdata,event.ydata])])
            w.areaPts+=1
            draw=True
        elif event.button==3:
            if w.areaPts>0:
                w.areaVec=w.areaVec[:w.areaPts,:]
                w.areaPts-=1
                draw=True
        elif event.button==2:
            w.figure.canvas.mpl_disconnect(w.cid)
            w.path=path.Path(w.areaVec[1:,:])      
            w.contains=w.path.contains_points 
        else:
            print('Unknown button')
            
        

        
        if draw:   
            if w.haveArea:
                w.areaFIG.remove()         
            w.areaFIG=mpatches.Polygon(w.areaVec[1:,:],facecolor='y',edgecolor='k',alpha=.35)
            w.ax.add_patch(w.areaFIG)
            w.figure.canvas.draw()
            w.haveArea=True
            
        return
            
                       
    
    clear_selection()
        
    w.areaVec=np.array([0,0])
    w.areaPts=0
    
    w.cid = w.Canvas1.mpl_connect('button_press_event',onclick_handler1)   



def spray_area():
    if w.Entry1.get()=='':
        return
    else:
        space=int(w.Entry1.get())
    if not hasattr(w,'areaVec'):
        return
    if not hasattr(w,'contains'):
        return
    gfactor=.25
    
    x,y,proj=ut.lcc(w.areaVec[1:,0],w.areaVec[1:,1])
    
    xh=np.arange(x.min(),x.max()+space,space)
    yh=np.arange(y.min(),y.max()+space,space)
    XH,YH=np.meshgrid(xh,yh)
    XH=XH.flatten()
    YH=YH.flatten()
    XH=XH+(np.random.rand(len(XH))-.5)*space*gfactor
    YH=YH+(np.random.rand(len(YH))-.5)*space*gfactor
    
    lon,lat=proj(XH,YH,inverse=True)    
    idx_vec=w.contains(np.array([lon,lat]).T)    
    lon,lat=lon[idx_vec],lat[idx_vec]
    
    if hasattr(w,'nodfile'):
        idx_vec=w.contains(w.nodfile)
        w.nodfile=w.nodfile[~idx_vec,:]
        w.nodfile=np.vstack([w.nodfile,np.vstack([lon,lat]).T])
    else:
        w.nodfile=np.vstack([lon,lat]).T
        w.CB4var.set(1)
        w.nodfileTF=True
        
    
    
    _plot_nodfile()
        
    
    
    
def remove_area():
    print('pygrid_support.TODO')
    sys.stdout.flush()
    
def load_coastline():
    """
    Load and plot a coastline.
    """
    filename=''
    filename=askopenfilename()
    if filename != '':
        w.coastlineFIG=ut.plotcoast(w.ax,filename=filename,fill=True)
        w.coastlineTF=True
        w.CB1var.set(1)
        w.figure.canvas.draw()
            
    return

def load_neifile():
    """
    Load and plot an neifile.
    """
    filename=''
    filename=askopenfilename()
    if filename != '':
        w.neifile=ut.load_nei2fvcom(filename)
        w.neifileFIG=w.ax.triplot(w.neifile['trigrid'],color='k',lw=.25)
        w.neifileTF=True
        w.CB3var.set(1)
        w.figure.canvas.draw()
            
    return
    
def load_segfile():
    """
    Load and plot an segfile.
    """
    filename=''
    filename=askopenfilename()
    if filename != '':
        w.segfile=ut.load_segfile(filename)
        ptarray=np.hstack([[w.segfile[seg][:,0],w.segfile[seg][:,1]] for seg in w.segfile]).T
        tmparray=[list(zip(w.segfile[seg][:,0],w.segfile[seg][:,1])) for seg in w.segfile]
        w.linecollection=LC(tmparray,color='b')
        w.segfileFIG=[w.linecollection,
                      w.ax.plot(ptarray[:,0],ptarray[:,1],'b.')]
        w.ax.add_collection(w.linecollection)
        w.segfileTF=True
        w.CB2var.set(1)
        w.figure.canvas.draw()
            
    return
    
def load_llzfile():
    """
    Load and plot an llzfile.
    """
    filename=''
    filename=askopenfilename()
    if filename != '':
        w.llzfile=ut.load_llzfile(filename)
        w.llzfileFIG=w.ax.scatter(w.llzfile[:,0], w.llzfile[:,1], c=w.llzfile[:,2],edgecolor='None')
        w.llzfileTF=True
        w.CB5var.set(1)
        w.figure.canvas.draw()
            
    return
    
def load_nodfile():
    """
    Load and plot an nodfile.
    **lots of different format for "nod" files this one is just ll**
    """
    filename=''
    filename=askopenfilename()
    if filename != '':
        w.nodfile=ut.load_llzfile(filename)
        _plot_nodfile()
        w.nodfileTF=True
        w.CB4var.set(1)
        w.figure.canvas.draw()
            
    return
    
def _plot_nodfile():
    
    
  
    if hasattr(w,'nodfileFIG'):
        w.nodfileFIG.remove()        
       
    w.nodfileFIG=w.ax.scatter(w.nodfile[:,0], w.nodfile[:,1], c='g',edgecolor='None')
    w.figure.canvas.draw()

    
    
    
    return
    
    
def toggle_coastline():
    """
    Toggle coastline
    """
    
    try:
        if w.coastlineTF:
            w.coastlineFIG.set_visible(False)
            w.coastlineTF=False
        else:
            w.coastlineFIG.set_visible(True)
            w.coastlineTF=True
            
        w.figure.canvas.draw()
    except AttributeError:
        w.CB1var.set(0)    
    
    return
    
def toggle_segfile():
    """
    Toggle segfile
    """
    
    try:
        if w.segfileTF:
            w.segfileFIG[0].set_visible(False)
            w.segfileFIG[1][0].set_visible(False)
            w.segfileTF=False
        else:
            w.segfileFIG[0].set_visible(True)
            w.segfileFIG[1][0].set_visible(True)
            w.segfileTF=True
            
        w.figure.canvas.draw()
    except AttributeError:
        w.CB2var.set(0)    
    
    return
    
def toggle_neifile():
    """
    Toggle neifile
    """
    
    try:
        if w.neifileTF:
            w.neifileFIG[0].set_visible(False)
            w.neifileFIG[1].set_visible(False)
            w.neifileTF=False
        else:
            w.neifileFIG[0].set_visible(True)
            w.neifileFIG[1].set_visible(True)
            w.neifileTF=True
            
        w.figure.canvas.draw()
    except AttributeError:
        w.CB3var.set(0)    
    
    return
    
def toggle_nodfile():
    """
    Toggle nodfile
    """

    try:
        if w.nodfileTF:
            w.nodfileFIG.set_visible(False)
            w.nodfileTF=False
        else:
            w.nodfileFIG.set_visible(True)
            w.nodfileTF=True
            
        w.figure.canvas.draw()
    except AttributeError:
        w.CB4var.set(0)    
    
    return
    
def toggle_llzfile():
    """
    Toggle llzfile
    """
    
    try:
        if w.llzfileTF:
            w.llzfileFIG.set_visible(False)
            w.llzfileTF=False
        else:
            w.llzfileFIG.set_visible(True)
            w.llzfileTF=True
            
        w.figure.canvas.draw()
    except AttributeError:
        w.CB5var.set(0)    
    
    return
    
def save_nodfile():
    
    filename=''
    filename=asksaveasfilename()
    if filename != '':
        ut.save_nodfile(w.nodfile,filename)
    
    

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import pygrid
    pygrid.vp_start_gui()








